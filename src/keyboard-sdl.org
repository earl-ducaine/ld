



* Keyboard layout


  In Unix, there are multiple abstraction layers for keyboard layouts.
  The apperent complexity of the scheme is the result decades worth of
  accumulated conventions, various hardware, OSes, terminals,
  keyboards, language encodings, internationalization schemes, UI
  environments, programming languanges, and geographical locations of
  software development communities, and corporate information
  processing environments, just to name a few factors.  That it is not
  more complex is an apperent miricle that probably points to the fact
  that there are fundamental principles at work that align practicle
  exegenies to some overarching paridigms.

  The brief collection of notes for implementing keyboard mapping for
  the LMI Lisp Machine can't possibly address any deeper aspect of
  layouts, but the author does tries to stay cognizant that such
  parigms might while outlining his chosen scheme.

  
** Keyboard mapping

   At its most general, a keyboard mapping scheme translates
   electrical implulses generated by some input device into a computer
   representation.

   If we think of the mapping as a process pipeline, aspects of the
   mapping are in hardware, some in firmware, some in software.  Some
   are staticically determined, some are dynamic.  As computational
   technology has evolved chronologically and its uses proliferated, a
   framework has evolved for managing this complexity.  

   While less formal (probably because accedemia has felt no need to
   include it within its computer science curriculum) the framework
   can be thought of as a variation of the OSI network model.  While
   the scourge of networking 101 students, because of its unclear
   mapping to TCP/IP and unintuitive naming, the model is in principle
   quite simple and intuitive. To recap (in reverse order)

   1. Physical 
      Electrical signals along the ethernet cable, radio waves
      throught the air, electrical pulses generated by mechanically
      depressing a key switch.

   2. Data Link
      MAC and LLC packets, key-codes delivered to the kernel via USB.

   3. Network 
      IP (Chaos Net) packets, mapping of keycodes to a connonical
      key-press on a standard virtual keyboard

   4 - 7. Host
      TCP sessions, HTTP, mapping of standard virtual keyboard
      key-press to X11 event.  Mapping of X11 events to UTF character
      codes, etc.

   For our purposes we're interested in key-codes delivered by SDL to
   keypresses on a virtual keyboard.  Those 
